#
# test - test EST service
#
#  Test definition file
#
#    Copyright (C) 2020 Gerardo García Peña <killabytenow@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
#


# =============================================================================
# GLOBAL CONFIG
# =============================================================================

# pest = {path to pest program}
#   Path where pest can be found (usually I<../pest>).
pest = ../pest

# ca_bits = {number}
#   This parameter is used for configuring the CA/SubCA private key key sizes.
ca_bits = 2048

# cert_bits = {number}
#   This parameter is used for configuring certificates private key key sizes.
cert_bits = 2048

# certdir = {path to test certificates}
#   Sets the target directory where test certificates will be written and kept.
certdir = certs

# outdir = {path to test output}
#   Path where test output will be written to.
outdir = out

# force = {1 enabled, 0 disabled}
#   For configuring the command line --force flag from a configuration file.
#force = 0

# verbose = {1 enabled, 0 disabled}
#   Enables verbose mode. Same as command line --verbose flag.
#verbose = 0

# debug = {1 enabled, 0 disabled}
#   Enables debug mode. Same as command line --debug flag.
#debug = 0


# =============================================================================
# EST CONFIG
# =============================================================================

[est]
# ca = {path}
#   Path to the CA Chain PEM file used by the EST server for authenticating
#   itself (over HTTPS communications) and issuing certificates.
ca = ca.crt

# url = {EST base url}
#   Base EST HTTPS URL service (e.g. https://rfctest7030.com/.well-known/est).
url = https://your_est_server:443/.well-known/est

# plain_base64 = {1 plain base64, 0 send PEM file}
#   If this flag is enabled, it instructs the B<pest> tool to be more RFC
#   respectful during enrollment, and do not send the CSR in PEM format (i.e.
#   exclude ---BEGIN CERTIFICATE REQUEST----- headers and such). It only sends
#   the CSR encoded in DER format, transferring it with base64 encoding.
#plain_base64 = 0

# strict = {1 enabled, 0 disabled}
#   This flag enables the EST-RFC7030 strict interpretation. This means that
#   during enrollments, if certificate based authentication is used, Subject
#   Name changes will be requested using the Change Subject Name attributes
#   described in the RFC730.
#
#   This flag can be set also from command line using the --est-strict flag.
#
#strict = 0

# creds = {credentials}
#   Default HTTP BASIC credentials used by TEST when accessing the EST server.
#   This credentials may be overrided by test during enrollments. See TESTS
#   DEFINITION SECTIONS in the TEST manual.
#creds = est:est

# issuer_subject_name = {subject}
#   Issuer subject name (e.g. C</CN=TestCA/O=MyEnrollmentCA/C=ES>) of the
#   certificates delivered by the EST server during enrollments.
issuer_subject_name = "/CN=TestCA"


# =============================================================================
# HOOKS
# =============================================================================

[hooks]
# Hooks allow to run/trigger custom program when a new test is started or the
# whitelist is populated. See TEST manual sections TEST HOOKS SECTION and HOOKS
# for more detail.

#test_start         = ./hooks/test_start.sh
#test_whitelist_add = ./hooks/test_whitelist_add_example.sh

# =============================================================================
# CERTIFICATES
# =============================================================================

[certificates]
# TRUSTED AND GOOD MANUFACTURERS
# ------------------------------
#
#   The following CA's (ManufA and ManufB) belong to good and nice simulated
#   providers. Both manufacturers' CA are issued by the Universal CA, which is
#   shared by ManufA, ManufB and ManufC (see below). Certificates issued by
#   these CA/SubCA represent birth/manufacturer certificates embedded into good
#   devices.
#
#   Note that a device with a certificate issued by one of these CA/SubCA do
#   not necessarily mean that that device is authorized to enroll. For
#   authorizing an enrollment, *at least* the device must present a valid
#   certificate with an explicitly authorized subject name.
#
#   Conclusion: install the CA/SubCA certificates required for validating
#   certificates in your EST service.
#
# Id      CA   Subject                                                   Issuer
# ------  ---  --------------------------------------------------------  ------
  UnivCA  yes  "/CN=Universal CA/O=Common PKI Services/C=RU"             -
  ManufA  yes  "/CN=ManufA CA/OU=Devices/O=ManufA Industries/C=ES"       UnivCA
  dec001  no   "/CN=SN00000001/O=Electric/C=ES"                          ManufA
  dec010  no   "/CN=SN00000010/O=Electric/C=ES"                          ManufA
  ManufB  yes  "/CN=Devices CA/OU=ManufB/O=Random Corp United/C=ES"      UnivCA
  dev001  no   "/CN=modelA SN 00100-0001/OU=Elec devs/O=RCU/C=UK"        ManufB
  dev002  no   "/CN=modelB SN 00110-0001/OU=Comm devs/O=RCU/C=UK"        ManufB

# THE CHEAP AND TRICKY MANUFACTURER
# ---------------------------------
#
#  The following CA (ManufC) is a tricky provider. It builds cheap devices, and
#  sometimes we have to use them -because they are cheap :(-.
#
#  For building "compatible" cheap devices, they copy certificate subjects from
#  existing ManufB certificates, and they sign them using their own-SubCA which
#  copies the ManufB issuer subject name. Due both CA (ManufB and ManufC) are
#  signed by the same CA (Universal CA), both companies may issue valid
#  certificates with colliding subject names and even colliding issuer subject
#  names!
#
#  All these implies that our EST server can not only rely in the subject name
#  for authorizing enrollments, it must also check that the authorization takes
#  into account the correct certificate issuer.
#
#  Conclusion: we have to install some mechanism in the EST server for checking
#  that the certificate belongs to the correct Sub-CA.
#
# Id      CA   Subject                                                   Issuer
# ------  ---  --------------------------------------------------------  ------
  ManufC  yes  "/CN=ManufC CA/O=ManufC - Bootlegs4all!/C=ES"             UnivCA
  TrickC  yes  "/CN=Devices CA/OU=ManufB/O=Random Corp United/C=ES"      ManufC
  bin001  no   "/CN=SN00000001/O=Electric/C=ES"                          TrickC
  bin002  no   "/CN=SN00000010/O=Electric/C=ES"                          TrickC

# EVIL CA
# -------
#
#  The following CA is a really ugly provider. We do not trust on them, and we
#  don't use their devices. Their products are bad pirate copies of ManufB
#  devices. They issue fake certificates belonging to aself-signed CA.
#
#  Conclusion: do not install this CA in your server! Is evil! X.509
#  certificate validation should be enough for protecting our enrollment system
#  of this provider!
#
# Id      CA   Subject                                                   Issuer
# ------  ---  --------------------------------------------------------  ------
  ManufD  yes  "/CN=Devices CA/OU=ManufB/O=Random Corp United/C=ES"      -
  rog001  no   "/CN=modelA SN 00100-0001/OU=Elec devs/O=RCU/C=UK"        ManufD
  rog002  no   "/CN=modelB SN 00110-0001/OU=Comm devs/O=RCU/C=UK"        ManufD

# =============================================================================
# TESTS
# =============================================================================

# -----------------------------------------------------------------------------
# 1. CACerts && CSRAttrs
# -----------------------------------------------------------------------------

#
# Make a call to /cacerts for obtaining the CA certs
[test 1.1]
title     = Get CA certs
whitelist = # void

	# get CA certs -- no enrollments
	1/action  = cacerts

#
# Make a call to /csrattrs for obtaining the expected CSR attributes
[test 1.2]
title     = Get CSR attributes
whitelist = # void

	# get CSR expected attributes -- no enrollments
	1/action  = csrattrs

# -----------------------------------------------------------------------------
# 2. SimpleEnroll
# -----------------------------------------------------------------------------

#
# Try to enroll without providing any valid certificate nor credentials. Also,
# use a void whitelist (do not authorize any enrollment). No enrollments should
# be authorized.
[test 2.1]
title     = No credentials, No enroll
whitelist = # The EST server enrollment whitelist is void
            #    -- no enrollments are expected.

	# a enrollment without creds/certs is attempted
	#	it should fail
	1/action  = simpleenroll
	1/in      = \
		(/CN=test_2.1) # ask for a SN without presenting credentials
                               # nor authentication certificates.

#
# With a void whitelist (no enrollments authorized), try to enroll using valid
# and fake certificates. All enrollments should be denied.
[test 2.2]
title     = Void whitelist, no enrollments
whitelist = # void

	# certificate based enrollment is attempted, but none authorized
	#	all should fail
	1/action  = simpleenroll
	1/in      = \
		(cert=dec001, /CN=fail.testca/O=testca/C=ES) !! \
		(cert=dec010, /CN=fail.testca/O=testca/C=ES) !! \
		(cert=dev001, /CN=fail.testca/O=testca/C=ES) !! \
		(cert=dev002, /CN=fail.testca/O=testca/C=ES) !! \
		(cert=bin001, /CN=fail.testca/O=testca/C=ES) !! \
		(cert=bin002, /CN=fail.testca/O=testca/C=ES) !! \
		(cert=rog001, /CN=fail.testca/O=testca/C=ES) !! \
		(cert=rog002, /CN=fail.testca/O=testca/C=ES) !!

#
# Allow the enrollment of a device of ManufA. All devices will try to enroll.
# Only the device identified by the certificate 'dec001' (requesting the
# subject name /CN=dec001.testca/O=testca/C=ES) should enroll. The other
# enrollments should be denied.
[test 2.3]
title     = Enrolling a new device from a ManufA
whitelist = \
	(cert=dec001, /CN=dec001.testca/O=testca/C=ES)

	# only first in attemp should work
	1/action  = simpleenroll
	1/in      = \
		(cert=dec001, /CN=dec001.testca/O=testca/C=ES) ++ \
		(cert=dec010, /CN=dec001.testca/O=testca/C=ES) !! \
		(cert=dev001, /CN=dec001.testca/O=testca/C=ES) !! \
		(cert=dev002, /CN=dec001.testca/O=testca/C=ES) !! \
		(cert=bin001, /CN=dec001.testca/O=testca/C=ES) !! \
		(cert=bin002, /CN=dec001.testca/O=testca/C=ES) !! \
		(cert=rog001, /CN=dec001.testca/O=testca/C=ES) !! \
		(cert=rog002, /CN=dec001.testca/O=testca/C=ES) !!

#
# Allow the enrollment of one device from ManufB. All devices will try to
# enroll. Only the device authenticating with the certificate 'dev001' should
# be authorized to enroll. The rest of enrollments must fail.
[test 2.4]
title     = Enrolling a new device from a ManufB
whitelist = \
	(cert=dev001, /CN=dev001.testca/O=testca/C=ES)

	# only last should work
	1/action  = simpleenroll
	1/in      = \
		(cert=dec001, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=dec010, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=bin001, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=bin002, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=rog001, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=rog002, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=dev002, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=dev001, /CN=dev001.testca/O=testca/C=ES) ++

#
# In this case only authorize the device presenting the certificate 'bin001'
# from ManufC to enroll. The rest of enrollments will fail.
[test 2.5]
title     = Enrolling a new device from a ManufC
whitelist = (cert=bin001, /CN=bin001.testca/O=testca/C=ES)

	# only last should work
	1/action  = simpleenroll
	1/in      = \
		(cert=dec001, /CN=bin001.testca/O=testca/C=ES) !! \
		(cert=dec010, /CN=bin001.testca/O=testca/C=ES) !! \
		(cert=dev001, /CN=bin001.testca/O=testca/C=ES) !! \
		(cert=dev002, /CN=bin001.testca/O=testca/C=ES) !! \
		(cert=bin002, /CN=bin001.testca/O=testca/C=ES) !! \
		(cert=rog001, /CN=bin001.testca/O=testca/C=ES) !! \
		(cert=rog002, /CN=bin001.testca/O=testca/C=ES) !! \
		(cert=bin001, /CN=bin001.testca/O=testca/C=ES) ++

#
# In this test we authorize certificates 'dec010' and 'bin002' to enroll. The
# rest of enrollments must fail:
#   - Note that in step 1 all enrollments are requesting the subject name
#     /CN=dec010.testca/O=testca/C=ES. This subject name is only assigned to
#     certificate 'dec010', so only the last enrollment should be authorized.
#   - Note that in step 2 all enrollments request the subject name
#     /CN=bin002.testca/O=testca/C=ES, assigned to bin002. Only the last
#     enrollment should work.
[test 2.6]
title     = Enrolling two devices (ManufA, ManufC)
whitelist = \
	(cert=dec010, /CN=dec010.testca/O=testca/C=ES) \
	(cert=bin002, /CN=bin002.testca/O=testca/C=ES)

	# only last should work
	1/action  = simpleenroll
	1/in      = \
		(cert=dec001, /CN=dec010.testca/O=testca/C=ES) !! \
		(cert=dev001, /CN=dec010.testca/O=testca/C=ES) !! \
		(cert=dev002, /CN=dec010.testca/O=testca/C=ES) !! \
		(cert=bin001, /CN=dec010.testca/O=testca/C=ES) !! \
		(cert=bin002, /CN=dec010.testca/O=testca/C=ES) !! \
		(cert=rog001, /CN=dec010.testca/O=testca/C=ES) !! \
		(cert=rog002, /CN=dec010.testca/O=testca/C=ES) !! \
		(cert=dec010, /CN=dec010.testca/O=testca/C=ES) ++

	# only last should work
	2/action  = simpleenroll
	2/in      = \
		(cert=dec001, /CN=bin002.testca/O=testca/C=ES) !! \
		(cert=dec010, /CN=bin002.testca/O=testca/C=ES) !! \
		(cert=dev001, /CN=bin002.testca/O=testca/C=ES) !! \
		(cert=dev002, /CN=bin002.testca/O=testca/C=ES) !! \
		(cert=bin001, /CN=bin002.testca/O=testca/C=ES) !! \
		(cert=rog001, /CN=bin002.testca/O=testca/C=ES) !! \
		(cert=rog002, /CN=bin002.testca/O=testca/C=ES) !! \
		(cert=bin002, /CN=bin002.testca/O=testca/C=ES) ++

#
# In this test the certificate 'dev001' is authorized to enroll, but the device
# tries to enroll twice! The second enrollment (in the second step) should
# fail.
[test 2.7]
title     = Reenrolling with the same certificate
whitelist = \
	(cert=dev001, /CN=dev001.testca/O=testca/C=ES)

	# first enroll of dev001 should work
	1/action  = simpleenroll
	1/in      = \
		(cert=dec001, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=dec010, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=dev001, /CN=dev001.testca/O=testca/C=ES) ++ \
		(cert=dev002, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=bin001, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=bin002, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=rog001, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=rog002, /CN=dev001.testca/O=testca/C=ES) !!

	# all enrolls in this step should fail
	2/action  = simpleenroll
	2/in      = \
		(cert=dec001, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=dec010, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=dev001, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=dev002, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=bin001, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=bin002, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=rog001, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=rog002, /CN=dev001.testca/O=testca/C=ES) !!

#
# In this test all devices try to enroll with an incorrect request subject
# name.
[test 2.8]
title      = Try enrolling with an incorrect subject
whitelist  = \
	(cert=dev001, /CN=dev001.testca/O=testca/C=ES)

	# all enrolls should fail - note that none CN will match
	1/action  = simpleenroll
	1/in      = \
		(cert=dec001, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=dec010, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=dev001, /CN=devXX1.testca/O=testca/C=ES) !! \
		(cert=dev002, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=bin001, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=bin002, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=rog001, /CN=dev001.testca/O=testca/C=ES) !! \
		(cert=rog002, /CN=dev001.testca/O=testca/C=ES) !!

# -----------------------------------------------------------------------------
# 3. Reenrollment
# -----------------------------------------------------------------------------

#
# In the following test the device 'dec001' is enrolled with the subject name
# /CN=dec001.testca/O=testca/C=ES. It should perform two reenrollments
# succesfully.
#
# NOTE:
#   Due test suite syntax, the whitelist declares the reenrollments explicitly,
#   but reenrollment using a valid an non-revoked operational certificate
#   should be always allowed by the EST server.
[test 3.1]
title     = Renrolling device dec001@ManufA
whitelist = \
	(cert=dec001,       /CN=dec001.testca/O=testca/C=ES) \
	(cert=test_3.1-1-1, /CN=dec001.testca/O=testca/C=ES) \
	(cert=test_3.1-1-2, /CN=dec001.testca/O=testca/C=ES)

	# the first enrollment should work correctly
	1/action  = simpleenroll
	1/in      = \
		(cert=dec001, /CN=dec001.testca/O=testca/C=ES) > test_3.1-1-1

	# this re-enrollment should work too!
	2/action  = simplereenroll
	2/in      = \
		(cert=test_3.1-1-1, /CN=dec001.testca/O=testca/C=ES) > test_3.1-2-1

	# and this one too!
	3/action  = simplereenroll
	3/in      = \
		(cert=test_3.1-2-1, /CN=dec001.testca/O=testca/C=ES) ++

#
# In the following test the device 'dev002' enrolls and performs two
# re-enrollments using the same operational certificate obtained during the
# enrollment. This should not be allowed by the EST server.
[test 3.2]
title     = Reenrolling a device with the same cert twice
whitelist = \
	(cert=dev002,       /CN=dec001.testca/O=testca/C=ES) \
	(cert=test_3.2-1-1, /CN=dec001.testca/O=testca/C=ES)

	# enroll first, should work
	1/action  = simpleenroll
	1/in      = \
		(cert=dev002, /CN=dec001.testca/O=testca/C=ES) > test_3.2-1-1

	# reenroll with the same certificate twice
	#	first should work, second try should FAIL
	2/action  = simplereenroll
	2/in      = \
		(cert=test_3.2-1-1, /CN=dec001.testca/O=testca/C=ES) ++ \
		(cert=test_3.2-1-1, /CN=dec001.testca/O=testca/C=ES) !!

#
# The device 'dec001' enrolls correctly, but tries to change its subject name
# during a re-enrollment. This is explicitly prohibited by this test and the
# RFC7030.
[test 3.3]
title     = Renrolling device and changing the Subject (should not be allowed)
whitelist = \
	(cert=dec001,       /CN=dec001.testca/O=testca/C=ES)
	(cert=test_3.3-1-1, /CN=dec001.testca/O=testca/C=ES)

	# enroll first, should work
	1/action  = simpleenroll
	1/in      = \
		(cert=dec001, /CN=dec001.testca/O=testca/C=ES) > test_3.3-1-1

	# try to re-enroll (but changing the subject name ilegally)
	2/action  = simplereenroll
	2/in      = \
		(cert=test_3.3-1-1, /CN=dec002.testca/O=testca/C=ES) !!

