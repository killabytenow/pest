.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AEST 1"
.TH AEST 1 "2020-11-27" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
aest \- Authorizator for EST service
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "Examples:"
.IX Subsection "Examples:"
.Vb 7
\&  ./aest [options] [actions ...]
\&  ./aest \-d certs add "/CN=auth subject" signer_id "/CN=assigned subject"
\&  ./aest \-d certs list
\&  ./aest \-d certs check aut.pem "/CN=requested subject"
\&  ./aest \-N \-d certs check aut.pem "/CN=requested subject"
\&  ./aest \-D \-d certs check aut.pem "/CN=requested subject"
\&  ./aest \-d certs reset
.Ve
.SS "Options:"
.IX Subsection "Options:"
.Vb 7
\&  \-d, \-\-cert\-dir=s    Directory with certificates generated by TEST.
\&  \-D, \-\-debug         Print debug information.
\&  \-h, \-\-help          Brief help message.
\&  \-m, \-\-man           Full documentation.
\&  \-N, \-\-no\-delete     Do not delete checked entries by action \*(Aqcheck\*(Aq
\&  \-v, \-\-verbose       Verbose messages.
\&  \-V, \-\-version       Print version information.
.Ve
.SS "Actions:"
.IX Subsection "Actions:"
.Vb 6
\&  add           Add a new entry in the whitelist.
\&  check         Check if a PEM file requesting certain subject is allowed to
\&                enroll. This action also removes authorized entries.
\&  list          List whitelist entries.
\&  reset         Clean database
\&  nop           NOP
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1AEST\s0\fR is a simple authorizer for integrating with a \s-1EST\s0 service. It decides,
according a whitelist, if a device can enroll (or not).
.SH "ACTIONS"
.IX Header "ACTIONS"
Each invocation to \fB\s-1AEST\s0\fR must be accompanied by an action:
.RS 4
.IP "\fBadd\fR" 4
.IX Item "add"
This action adds a new entry in the whitelist. It requires the following
parameters:
.RS 4
.ie n .IP """authentication_subject""" 4
.el .IP "\f(CWauthentication_subject\fR" 4
.IX Item "authentication_subject"
The subject found in the certificate that will be used for authenticating
against the \s-1EST\s0 server.
.ie n .IP """authentication_issuer_id""" 4
.el .IP "\f(CWauthentication_issuer_id\fR" 4
.IX Item "authentication_issuer_id"
The \s-1ID\s0 used for signing the certificate in the \f(CW\*(C`test.conf\*(C'\fR configuration file
in the \f(CW\*(C`[certificates]\*(C'\fR section. For instance, \f(CW\*(C`ManufB\*(C'\fR refers to the
\&\fIManufacturer B\fR Sub-CA.
.ie n .IP """assigned_subject_name""" 4
.el .IP "\f(CWassigned_subject_name\fR" 4
.IX Item "assigned_subject_name"
When a device uses \s-1EST\s0 for enrolling, it may ask for a new subject name. This
parameter is the subject name expected to be requested by the device. Note that
it may be different from the \f(CW\*(C`authentication_subject\*(C'\fR.
.RE
.RS 4
.Sp
Example:
.Sp
.Vb 4
\&    ./authorizator \-d certs \e
\&        add "/CN=modelB SN 00110\-0001/OU=Comm devs/O=RCU/C=UK" \e
\&        ManufB \e
\&        "/CN=dec001.testca/O=testca/C=ES"
.Ve
.RE
.IP "\fBcheck\fR" 4
.IX Item "check"
Check if a \s-1PEM\s0 file requesting certain subject is allowed to enroll. This
action also removes authorized entries.
.Sp
The \s-1EST\s0 server should call this action passing the following arguments:
.RS 4
.ie n .IP """authentication_PEM_File""" 4
.el .IP "\f(CWauthentication_PEM_File\fR" 4
.IX Item "authentication_PEM_File"
The \s-1EST\s0 server must extract the client certificate used during \s-1TLS\s0
authentication, save it to disk and pass its path to this program.
.ie n .IP """requested_subject""" 4
.el .IP "\f(CWrequested_subject\fR" 4
.IX Item "requested_subject"
This is the requested subject during the enrollment. The \s-1EST\s0 must extract it
from the \s-1CSR\s0 passed by the client.
.RE
.RS 4
.Sp
This command exits with code 0 if everything is \s-1OK,\s0 with a exit code different
of zero if some error happened.
.Sp
By default, this command removes the entry that matched succesfully with this
authentication. If you want to keep the whitelist untouched, then add the \f(CW\*(C`\-N\*(C'\fR
flag parameter.
.Sp
Example of invocations:
.Sp
.Vb 6
\&  $ ./aest \-D \-d certs check certs/dev002.pem \e
\&                             "/CN=dec001.testca/O=testca/C=ES" \e
\&    && echo "ENROLLED!"
\&  ./aest:DBG: Action \*(Aqcheck\*(Aq
\&  ./aest:MSG: Checking \*(Aq/CN=modelB SN 00110\-0001/OU=Comm devs/O=RCU/C=UK\*(Aq (certs/dev002.pem) requesting \*(Aq/CN=dec001.testca/O=testca/C=ES\*(Aq.
\&  ./aest:FAT: Cannot enroll
\&  
\&  $ ./aest \-D \-d certs check certs/dev002.pem \e
\&                             "/CN=dec001.testca/O=testca/C=ES" \e
\&    && echo "ENROLLED!"
\&  ./aest:DBG: Action \*(Aqcheck\*(Aq
\&  ./aest:MSG: Checking \*(Aq/CN=modelB SN 00110\-0001/OU=Comm devs/O=RCU/C=UK\*(Aq ...
\&            ...(certs/dev002.pem) requesting \*(Aq/CN=dec001.testca/O=testca/C=ES\*(Aq.
\&  ./aest:DBG:   \- signer \*(AqManufB\*(Aq, requested \*(Aq/CN=dec001.testca/O=testca/C=ES\*(Aq
\&  certs/dev002.pem: OK
\&  ./aest:MSG: Can enroll!
\&  ./aest:DBG:   \- Deleting seleted auth
\&  ENROLLED!
.Ve
.RE
.IP "\fBlist\fR" 4
.IX Item "list"
List whitelist entries.
.IP "\fBreset\fR" 4
.IX Item "reset"
Clean database. Delete all entries.
.IP "\fBnop\fR" 4
.IX Item "nop"
Nothing to see here. Move along.
.RE
.RS 4
.RE
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\s-1AEST\s0\fR supports the following options:
.RS 4
.IP "\fB\-d\fR, \fB\-\-cert\-dir\fR=\fIs\fR" 4
.IX Item "-d, --cert-dir=s"
Directory with certificates generated by \s-1TEST.\s0
.IP "\fB\-D\fR, \fB\-\-debug\fR" 4
.IX Item "-D, --debug"
Dump \s-1HTTP\s0 communications and other useful debug information. This flag also enables
verbosity (see \fI\-v\fR).
.IP "\fB\-h\fR, \fB\-\-help\fR" 4
.IX Item "-h, --help"
Print a brief help message and exits.
.IP "\fB\-m\fR, \fB\-\-man\fR" 4
.IX Item "-m, --man"
Prints the manual page and exits.
.IP "\fB\-N\fR, \fB\-\-no\-delete\fR" 4
.IX Item "-N, --no-delete"
Do not delete entries from the whitelist that have been succesfully matched by
action 'check'. It allows to verify if a certain enrollment may work without
altering the whitelist database.
.IP "\fB\-v\fR, \fB\-\-verbose\fR" 4
.IX Item "-v, --verbose"
Verbose messages.
.IP "\fB\-V\fR, \fB\-\-version\fR" 4
.IX Item "-V, --version"
Print version information.
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "pest" 8
.IX Item "pest"
\&\s-1PEST\s0 manual page.
.IP "test" 8
.IX Item "test"
\&\s-1TEST\s0 manual page.
.IP "test.conf" 8
.IX Item "test.conf"
A complete test suite for testing an \s-1EST\s0 server supporting enrollments based on
third-party \s-1CA\s0 issued certificates. This means that clients authenticate
themselves using a certificate belonging to an external \s-1CA\s0 during enrollment.
Once they are enrolled, re-enrollments are conducted using the \s-1EST CA.\s0
.ie n .IP """demo.conf"" in demo" 8
.el .IP "``demo.conf'' in demo" 8
.IX Item "demo.conf in demo"
A complete (and simpler) test suite for testing the public \s-1EST\s0 service found in
<http://testrfc7030.com/>.
.IP "<http://www.testrfc7030.com/>" 8
.IX Item "<http://www.testrfc7030.com/>"
This server can be used to test the \s-1EST\s0 protocol as defined in \s-1RFC 7030.\s0
