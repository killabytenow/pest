.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PEST 1"
.TH PEST 1 "2020-11-16" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pest \- Perl EST client
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "Examples:"
.IX Subsection "Examples:"
.Vb 10
\&  ./pest [options] [actions ...]
\&  ./pest \-l est\-server\-url \-C ca.pem \-o output_dir \-N cacerts
\&  ./pest \-l est\-server\-url \-C ca.pem \-u creds \-s subject \-o outdir simpleenroll
\&  ./pest \-l est\-server\-url \-C ca.pem \-c cert \-k private_key \-s subject \e
\&         \-o outdir simpleenroll # Change subject, not RFC compliant
\&  ./pest \-l est\-server\-url \-C ca.pem \-c cert \-k private_key \-S subject \e
\&         \-o outdir simpleenroll # Change subject, RFC compliant
\&  ./pest \-l est\-server\-url \-C ca.pem \-c cert \-k private_key \e
\&         \-o outdir simplereenroll
\&  ./pest \-l est\-server\-url \-C ca.pem \-u creds \-s subject \-o outdir serverkeygen
.Ve
.SS "Options:"
.IX Subsection "Options:"
.Vb 10
\&  \-b, \-\-rsa\-bits=n            Generate a RSA key of I<n> bits.
\&  \-B, \-\-plain\-base64          Do not send full PEM, only Base64 encoded DER
\&  \-u, \-\-creds=s               Authentication credentials.
\&  \-D, \-\-debug                 Enable debug information.
\&  \-C, \-\-ca=s                  Path to CA PEM file with CA certificates.
\&  \-c, \-\-client\-pem=s          Client certificate.
\&  \-k, \-\-client\-key=s          Client certificate\*(Aqs private key.
\&  \-S, \-\-change\-subject=s      ChangeSubjectName.subject attribute value.
\&  \-A, \-\-change\-subject\-alt=s  ChangeSubjectName.subjectAlt attribute value.
\&  \-o, \-\-out=s                 Output directory.
\&  \-s, \-\-subject=s             Set CSR subject name value.
\&  \-a, \-\-subject\-alt=s         Set CSR subject alt name value.
\&  \-l, \-\-url=s                 EST server url.
\&  \-O, \-\-overwrite             Overwrite all existing files.
\&  \-t, \-\-timestamp             Prepend a timestamp on all written files.
\&  \-v, \-\-verbose               Verbose messages.
\&  \-n, \-\-no\-verify\-hostname    Do not check if the EST server hostname
\&                              matches with the EST X.509 common name.
\&  \-N, \-\-no\-verify\-certs       Do not verify EST X.509 server certificate.
\&  \-h, \-\-help                  Brief help message.
\&  \-m, \-\-man                   Full documentation.
\&  \-V, \-\-version               Print version information.
.Ve
.SS "Actions:"
.IX Subsection "Actions:"
.Vb 7
\&  cacerts                     Distribution of CA Certificates
\&  simpleenroll                Operation for client enrollment,
\&  simplereenroll              Operation for client re\-enrollment.
\&  serverkeygen                Enroll using a server\-side generated key.
\&  csrattrs                    Get CSR attributes.
\&  fullcmc                     I<NOT IMPLEMENTED YET>. Full CMC proxy.
\&  nop                         No operation. It does nothing, really nothing.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1PEST\s0\fR is a Perl \s-1EST\s0 client designed for testing \s-1EST\s0 implementations. It is
easily modifiable and allows supporting not-standard and extremely strict
standard features.
.SH "ACTIONS"
.IX Header "ACTIONS"
.IP "\fBcacerts\fR" 8
.IX Item "cacerts"
This \s-1EST\s0 method allows an \s-1EST\s0 client, which it was not configured with an
Implicit \s-1TA\s0 database, to bootstrap the installation of the Explicit \s-1TA\s0 database.
.Sp
Therefore the \s-1EST\s0 client may use the \f(CW\*(C`/cacerts\*(C'\fR response to establish an
Explicit Trust Anchor database for subsequent \s-1TLS\s0 authentication of the \s-1EST\s0
server.
.IP "\fBsimpleenroll\fR" 8
.IX Item "simpleenroll"
The \f(CW\*(C`/simpleenroll\*(C'\fR \s-1EST\s0 operation allows a client to request a certificate
from the \s-1EST\s0 server with an unique \s-1HTTPS POST\s0 request.
.Sp
The \f(CW\*(C`/simpleenroll\*(C'\fR operation allows usage of the \f(CW\*(C`ChangeSubjectName\*(C'\fR \s-1RFC
7030\s0 feature (see options \fI\-\-change\-subject\fR and \fI\-\-change\-subject\-alt\fR) for
choosing a new \fISubject\fR when authentication is done via client
certificates. If the \s-1EST\s0 server does not support this feature, the \fI\-\-subject\fR
and \fI\-\-subject\-alt\fR parameters may be used for proposing a new subject or
subject alternative name in the \f(CW\*(C`SubjectName\*(C'\fR and \f(CW\*(C`SubjectAltName\*(C'\fR \s-1CSR\s0
attributes.
.IP "\fBsimplereenroll\fR" 8
.IX Item "simplereenroll"
The \f(CW\*(C`/simplereenroll\*(C'\fR is very similar to the \f(CW\*(C`/simpleenroll\*(C'\fR method, but it
is designed for only allowing certificate renewals.
.Sp
Note that options \fI\-\-change\-subject\fR and \fI\-\-change\-subject\-alt\fR are ignored
by this program when using this method. Nevertheless, this program features
that the user can still override in the \s-1CSR\s0 the expected subject name and
subject alt name (saw during the client certificate authentication) using the
parameters \fI\-\-subject\fR and \fI\-\-subject\-alt\fR. In theory the \s-1EST\s0 server should
prohibit changing the subject name and the subject alt name during a renewal.
.IP "\fBserverkeygen\fR" 8
.IX Item "serverkeygen"
This method is equivalent to the \f(CW\*(C`/simpleenroll\*(C'\fR operation, but the key
information supplied in the \s-1CSR\s0 is substituted by a new key generated on the
server side. Both, the enrolled certificate and the generated key are returned
by the server.
.Sp
Support for the \f(CW\*(C`/serverkeygen\*(C'\fR function is \s-1OPTIONAL\s0 for both clients and
servers.
.IP "\fBfullcmc\fR" 8
.IX Item "fullcmc"
\&\fIThis feature is not implemented yet\fR. An \s-1EST\s0 client can request a certificate
from an \s-1EST\s0 server with an \s-1HTTPS POST\s0 using the operation path value of
\&\f(CW\*(C`/fullcmc\*(C'\fR.
.Sp
Support for the \f(CW\*(C`/fullcmc\*(C'\fR function is \s-1OPTIONAL\s0 for both clients and servers.
.IP "\fBcsrattrs\fR" 8
.IX Item "csrattrs"
The \s-1EST\s0 client requests a list of CA-desired \s-1CSR\s0 attributes from the \s-1CA\s0 by
using this operation.
.Sp
Support for the \f(CW\*(C`/csrattrs\*(C'\fR function is \s-1OPTIONAL\s0 for both clients and servers.
.IP "\fBnop\fR" 8
.IX Item "nop"
Nothing to see here. Move along.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-b\fR, \fB\-\-rsa\-bits\fR=\fIn\fR" 8
.IX Item "-b, --rsa-bits=n"
Generate a \s-1RSA\s0 key of \fBn\fR bits. By default 2048 bits are used.
.IP "\fB\-B\fR, \fB\-\-plain\-base64\fR" 8
.IX Item "-B, --plain-base64"
It instructs \fBpest\fR to be more \s-1RFC\s0 respectful during enrollment, and do not
send the \s-1CSR\s0 in \s-1PEM\s0 format (i.e. exclude \f(CW\*(C`\-\-\-BEGIN CERTIFICATE REQUEST\-\-\-\-\-\*(C'\fR
headers and such). It only sends the \s-1CSR\s0 encoded in \s-1DER\s0 format, transferring it
with base64 encoding.
.IP "\fB\-u\fR, \fB\-\-creds\fR=\fIuser:pass\fR" 8
.IX Item "-u, --creds=user:pass"
\&\s-1HTTP\s0 Basic authentication credentials used during enrollment. Credentials are
packed using the traditional \f(CW\*(C`username:password\*(C'\fR format.
.IP "\fB\-D\fR, \fB\-\-debug\fR" 8
.IX Item "-D, --debug"
Dump \s-1HTTP\s0 communications and other useful debug information. This flag also enables
verbosity (see \fB\-v\fR).
.IP "\fB\-C\fR, \fB\-\-ca\fR=\fIpath\fR" 8
.IX Item "-C, --ca=path"
Path to a \s-1PEM\s0 file with all \s-1CA\s0 certificates required for authenticating \s-1TLS\s0
connections and validating certificates.
.IP "\fB\-n\fR, \fB\-\-no\-verify\-hostname\fR" 8
.IX Item "-n, --no-verify-hostname"
Do not check that the \s-1EST\s0 server hostname.
.IP "\fB\-N\fR, \fB\-\-no\-verify\-certs\fR" 8
.IX Item "-N, --no-verify-certs"
Do not verify \s-1EST X.509\s0 server certificates. Useful when invoking the \s-1EST\s0
\&\f(CW\*(C`cacerts\*(C'\fR method for the first time.
.IP "\fB\-c\fR, \fB\-\-client\-pem\fR=\fIpath\fR" 8
.IX Item "-c, --client-pem=path"
Path to \s-1PEM\s0 file with the public client certificate used for authenticating to
the \s-1EST\s0 server.
.IP "\fB\-k\fR, \fB\-\-client\-key\fR=\fIpath\fR" 8
.IX Item "-k, --client-key=path"
Path to \s-1PEM\s0 file with the client certificate private key used for
authenticating to the \s-1EST\s0 server.
.IP "\fB\-S\fR, \fB\-\-change\-subject\fR=\fInew_subject\fR" 8
.IX Item "-S, --change-subject=new_subject"
This flag sets the \f(CW\*(C`subject\*(C'\fR value in the \f(CW\*(C`ChangeSubjectName\*(C'\fR attribute
extension as defined in \fI\s-1RFC 6402\s0\fR (Client Name Change Request attribute).
.IP "\fB\-A\fR, \fB\-\-change\-subject\-alt\fR=\fInew_subject_alt\fR" 8
.IX Item "-A, --change-subject-alt=new_subject_alt"
This flag sets the \f(CW\*(C`subjectAlt\*(C'\fR value in the \f(CW\*(C`ChangeSubjectName\*(C'\fR attribute
extension as defined in \fI\s-1RFC 6402\s0\fR (Client Name Change Request attribute).
.IP "\fB\-o\fR, \fB\-\-out\fR=\fIpath\fR" 8
.IX Item "-o, --out=path"
Output directory. Keys, certificate signing requests, certificates and raw
responses will be written on this output directory.
.Sp
If no output directory is set, all data will be written to the terminal.
.IP "\fB\-s\fR, \fB\-\-subject\fR=\fIsubject\fR" 8
.IX Item "-s, --subject=subject"
By default the \fIsubject\fR value found in the client certificate will be used
(see \fB\-c\fR). Nevertheless, this option allows overriding this value and force
setting other desired subject in the Certificate Signing Request.
.Sp
Note that this field is mandatory if enrollment is performed without \s-1TLS\s0 client
certificate authentication.
.IP "\fB\-a\fR, \fB\-\-subject\-alt\fR=\fIsubject_alt\fR" 8
.IX Item "-a, --subject-alt=subject_alt"
By default the \fIsubject_alt\fR value found in the client certificate will be
used (see \fB\-c\fR). Nevertheless, this option allows overriding this value and
force setting other desired subject alt name in the Certificate Signing Request.
.IP "\fB\-l\fR, \fB\-\-url\fR=\fIurl\fR" 8
.IX Item "-l, --url=url"
\&\s-1URL\s0 pointing to \s-1EST\s0 server base path.
Example: <https://testrfc7030.com:8443/.well\-known/est>
.IP "\fB\-O\fR, \fB\-\-overwrite\fR" 8
.IX Item "-O, --overwrite"
Overwrite all existing files.
.IP "\fB\-t\fR, \fB\-\-timestamp\fR" 8
.IX Item "-t, --timestamp"
Prepend a timestamp on all written files.
.IP "\fB\-v\fR, \fB\-\-verbose\fR" 8
.IX Item "-v, --verbose"
Verbose messages.
.IP "\fB\-h\fR, \fB\-\-help\fR" 8
.IX Item "-h, --help"
Print a brief help message and exits.
.IP "\fB\-m\fR, \fB\-\-man\fR" 8
.IX Item "-m, --man"
Prints the manual page and exits.
.IP "\fB\-V\fR, \fB\-\-version\fR" 8
.IX Item "-V, --version"
Print version information.
.SH "CAVEATS"
.IX Header "CAVEATS"
.SS "\s-1DSA, ECDSA\s0 and other algorithms"
.IX Subsection "DSA, ECDSA and other algorithms"
This program only can request \s-1RSA X.509\s0 certificates due a limitation of
Crypt::OpenSSL::PKCS10. This module, used for creating and signing \s-1PKCS10\s0
documents (certificate signing requests), can only generate and use \s-1RSA\s0 keys.
.ie n .SS "Method ""/serverkeygen"" does not parse the response"
.el .SS "Method \f(CW/serverkeygen\fP does not parse the response"
.IX Subsection "Method /serverkeygen does not parse the response"
This method is not completed yet and it only downloads the \s-1PKCS7\s0 response,
without extracting the certificate and the private key.
.ie n .SS "Hardcoded \s-1RSA\s0 key for ""/serverkeygen"""
.el .SS "Hardcoded \s-1RSA\s0 key for \f(CW/serverkeygen\fP"
.IX Subsection "Hardcoded RSA key for /serverkeygen"
Note than the following 512 bit \s-1RSA\s0 key is used by the method \f(CW\*(C`/serverkeygen\*(C'\fR
as a bogus key during enrollments:
.PP
.Vb 9
\&  \-\-\-\-\-BEGIN RSA PRIVATE KEY\-\-\-\-\-
\&  MIIBOgIBAAJBANi4IWNVyIAj6/D2XXjba4AmkBLt5AB3PjiDJc33Bw53yfXwqpVH
\&  KyT2TRjlsR73C9oe0dmvNLP7cMa2MnzkspMCAwEAAQJAZbU8jicDOwggweyNf5vS
\&  fskaUpfsqj9MJy99fYUSfbni38wr9npMvAhTnv+rIdVwpRtV4f/Kd2H6JKtY9/ue
\&  cQIhAPgIc+5TOd1K/2d9CW2Fk1Ystx9/gbnKPj4oSwLHUBh5AiEA364wJ5Toh6ux
\&  1T4US6TFYTU3dpRtSGF7mOxt0c2QOGsCIGUh/TM12Cg1BkLKJufzSQogHWLIeLqq
\&  jgqGH1+4qR3xAiEAnqUavlgc/GzIOmhHWMdKvwFRjycCw31wfiviUBWuHnUCIG2d
\&  afQkE1eKadRsILrI8jETA0xW4MrOvpjDkj3Ktbeq
\&  \-\-\-\-\-END RSA PRIVATE KEY\-\-\-\-\-
.Ve
.PP
This key is hardcoded for not wasting cpu cycles and for checking easily if the
key returned by the method \f(CW\*(C`/serverkeygen\*(C'\fR has been changed (or not). Note
that this key is small and weak, and a compromised \s-1RSA\s0 key. For god's sake, it
never should appear in the returned certificate.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.ie n .IP """\s-1RFC 6402\s0 Certificate Management over \s-1CMS\s0 (\s-1CMC\s0) Updates""" 8
.el .IP "``\s-1RFC 6402\s0 Certificate Management over \s-1CMS\s0 (\s-1CMC\s0) Updates''" 8
.IX Item "RFC 6402 Certificate Management over CMS (CMC) Updates"
This document contains a set of updates to the base syntax for \s-1CMC,\s0 a
Certificate Management protocol using the Cryptographic Message Syntax (\s-1CMS\s0).
.Sp
This document defines the ChangeSubjectName \s-1CSR\s0 extension used by options
\&\fI\-\-change\-subject\fR and \fI\-\-change\-subject\-alt\fR.
.ie n .IP """\s-1RFC 7030\s0 Enrollment over Secure Transport""" 8
.el .IP "``\s-1RFC 7030\s0 Enrollment over Secure Transport''" 8
.IX Item "RFC 7030 Enrollment over Secure Transport"
This document profiles certificate enrollment for clients using Certificate
Management over \s-1CMS\s0 (\s-1CMC\s0) messages over a secure transport.  This profile,
called Enrollment over Secure Transport (\s-1EST\s0), describes a simple, yet
functional, certificate management protocol targeting Public Key Infrastructure
(\s-1PKI\s0) clients that need to acquire client certificates and associated
Certification Authority (\s-1CA\s0) certificates.  It also supports client-generated
public/private key pairs as well as key pairs generated by the \s-1CA.\s0
.IP "<http://www.testrfc7030.com/>" 8
.IX Item "<http://www.testrfc7030.com/>"
This server can be used to test the \s-1EST\s0 protocol as defined in \s-1RFC 7030.\s0
