.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TEST 1"
.TH TEST 1 "2020-11-27" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
test \- Test EST
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "Examples:"
.IX Subsection "Examples:"
.Vb 10
\&  ./test [options] [actions ...]
\&  ./test \-c test\-suite.conf \-t local\-config.conf run 1.3
\&  ./test \-c all_in_one.conf gendata
\&  ./test \-c all_in_one.conf run all
\&  ./test \-c all_in_one.conf run [test_id1, test_id2, ...]
\&  ./test \-c all_in_one.conf \-s \-b run all
\&  ./test \-c all_in_one.conf \-vD run 2.1
\&  ./test \-c all_in_one.conf list
\&  ./test \-c all_in_one.conf reset
\&  ./test \-c all_in_one.conf clean \-f
.Ve
.SS "Options:"
.IX Subsection "Options:"
.Vb 10
\&  \-b, \-\-est\-base64    Do not send full PEM, only Base64 encoded DER.
\&  \-c, \-\-config=s      Load configuration file. This option can be used multiple
\&                      times. Order will be respected.
\&  \-D, \-\-debug         Print debug information.
\&  \-f, \-\-force         Overwrite existing files. Force actions.
\&  \-h, \-\-help          Brief help message.
\&  \-m, \-\-man           Full documentation.
\&  \-s, \-\-est\-strict    Make use of the RFC7030 Change Subject Name attribute.
\&  \-v, \-\-verbose       Verbose messages.
\&  \-V, \-\-version       Print version information.
.Ve
.SS "Actions:"
.IX Subsection "Actions:"
.Vb 7
\&  clean               Delete all data (Requires \-f flag)
\&  config              Dump parsed configuration (for debugging purposes)
\&  gendata             Generate CA and certificates used by tests.
\&  list                List tests and their current status (passed/failed)
\&  nop                 NOP
\&  reset               Delete all test ouput data (but keep generated certs)
\&  run                 Run a list of test (or all test if \*(Aqall\*(Aq is passed)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1TEST\s0\fR is a Perl Test \s-1EST\s0 program designed for running a \s-1EST\s0 test suite
against \s-1EST\s0 implementations. Test suites are created using own \s-1TEST\s0 test
definition language.
.PP
Test suites are defined in one or more configuration files. See
\&\*(L"\s-1CONFIGURATION FILE FORMAT\*(R"\s0 for more details.
.SH "ACTIONS"
.IX Header "ACTIONS"
Each invocation to \fB\s-1TEST\s0\fR must be accompanied by an action:
.RS 4
.IP "\fBclean\fR" 4
.IX Item "clean"
This action will delete all data generated by a test suite, including
certificates and CA/SubCA generated by action \fIgendata\fR.
.Sp
This action will refuse working if flag \fI\-\-force\fR is not set.
.IP "\fBconfig\fR" 4
.IX Item "config"
Dump consolidaed and parsed configuration from configuration files. Output is
in Data::Dumper format.
.Sp
This action is designed for desesperated debugging purposes.
.IP "\fBgendata\fR" 4
.IX Item "gendata"
Build all certificates and CA/SubCA structure defined in section
\&\*(L"\s-1TEST CERTIFICATES CONFIGURATION\*(R"\s0 by the configuration files.
.Sp
This data will be written in path set by the global parameter \fIcertdir\fR.
.IP "\fBlist\fR" 4
.IX Item "list"
This command will list all tests defined by the configuration files, and their
current status (passed/failed/pending/error).
.IP "\fBnop\fR" 4
.IX Item "nop"
Nothing to see here. Move along.
.IP "\fBreset\fR" 4
.IX Item "reset"
This action will delete all output generated by tests. Note that certificates
and CA/SubCA generated by the action \fIgendata\fR will remain untouched.
.IP "\fBrun\fR" 4
.IX Item "run"
This action run the list of tests (by id) passed as arguments.
.RE
.RS 4
.RE
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\s-1TEST\s0\fR supports the following options:
.RS 4
.IP "\fB\-b\fR, \fB\-\-est\-base64\fR" 4
.IX Item "-b, --est-base64"
It instructs \fBpest\fR to be more \s-1RFC\s0 respectful during enrollment, and do not
send the \s-1CSR\s0 in \s-1PEM\s0 format (i.e. exclude \f(CW\*(C`\-\-\-BEGIN CERTIFICATE REQUEST\-\-\-\-\-\*(C'\fR
headers and such). It only sends the \s-1CSR\s0 encoded in \s-1DER\s0 format, transferring it
with base64 encoding.
.IP "\fB\-c\fR, \fB\-\-config\fR=\fIs\fR" 4
.IX Item "-c, --config=s"
This option can be defined multiple times, and it is processed in the same
order than it is set in the command line.
.Sp
It loads configuration files, one after another. Configuration files may
overwrite or add new information to each section.
.IP "\fB\-D\fR, \fB\-\-debug\fR" 4
.IX Item "-D, --debug"
Dump \s-1HTTP\s0 communications and other useful debug information. This flag also enables
verbosity (see \fI\-v\fR).
.IP "\fB\-f\fR, \fB\-\-force\fR" 4
.IX Item "-f, --force"
Overwrite existing files. Force actions.
.IP "\fB\-h\fR, \fB\-\-help\fR" 4
.IX Item "-h, --help"
Print a brief help message and exits.
.IP "\fB\-m\fR, \fB\-\-man\fR" 4
.IX Item "-m, --man"
Prints the manual page and exits.
.IP "\fB\-s\fR, \fB\-\-est\-strict\fR" 4
.IX Item "-s, --est-strict"
This flag enables the \s-1EST\-RFC7030\s0 strict interpretation. This means that during
enrollments, if certificate based authentication is used, Subject Name changes
will be requested using the Change Subject Name attributes described in the
\&\s-1RFC730.\s0
.Sp
This flag can be also configured from a configuration file using the \fIstrict\fR
parameter in the \*(L"\s-1EST CONFIGURATION SECTION\*(R"\s0 section.
.IP "\fB\-v\fR, \fB\-\-verbose\fR" 4
.IX Item "-v, --verbose"
Verbose messages.
.IP "\fB\-V\fR, \fB\-\-version\fR" 4
.IX Item "-V, --version"
Print version information.
.RE
.RS 4
.RE
.SH "CONFIGURATION FILE FORMAT"
.IX Header "CONFIGURATION FILE FORMAT"
Configuration files contain:
.Sp
.RS 4
\&\- Configuration parameters.
.Sp
\&\- The certificates, test \s-1CA\s0 and test Sub-CA schema for building the test
certificates.
.Sp
\&\- Hooks for executing external programs during tests.
.Sp
\&\- Tests.
.RE
.PP
Configuration files may contain comments. Comments are always ignored, and they
must start with the hash character \f(CW\*(C`#\*(C'\fR and they finish at the end of the line.
.PP
Examples:
.PP
.Vb 3
\&  parameter = value  # this is a comment about this parameter
\&  my_param =  # this seems assigning a comment to a parameter, but it
\&              # is not true: my param will not have any value assigned
.Ve
.PP
A configuration file is divided into several sections. There are standard fixed
sections and test sections, each one distinguished by its own \fIid\fR. Examples
of directives opening different sections:
.PP
.Vb 2
\&  [est]
\&    ... here goes \*(Aqest\*(Aq configuration parameters ...
\&
\&  [test my_test]
\&    ... here goes my test definition ...
\&
\&  [hooks]
\&    ... here is where hooks are installed ...
.Ve
.PP
Each configuration is described in detail in the following sections.
.SS "\s-1IMPLICIT GLOBAL SECTION\s0"
.IX Subsection "IMPLICIT GLOBAL SECTION"
Any parameter set before any section is opened is set in the implicit global
section.
.PP
Global parameters are global configuration parameters for configuring the most
basic parameters of the \s-1TEST\s0 and \s-1PEST\s0 applications.
.RS 4
.IP "\fBca_bits\fR=\fInumber\fR" 4
.IX Item "ca_bits=number"
This parameter is used for configuring the CA/SubCA private key key sizes.
.IP "\fBcert_bits\fR=\fInumber\fR" 4
.IX Item "cert_bits=number"
This parameter is used for configuring certificates private key key sizes.
.IP "\fBcertdir\fR=\fIpath to test certificates\fR" 4
.IX Item "certdir=path to test certificates"
Sets the target directory where test certificates will be written and kept.
.IP "\fBoutdir\fR=\fIpath to test output\fR" 4
.IX Item "outdir=path to test output"
Path where test output will be written to.
.IP "\fBpest\fR=\fIpath to pest program\fR" 4
.IX Item "pest=path to pest program"
Path where pest can be found (usually \fI../pest\fR).
.IP "\fBforce\fR=\fI1 enabled, 0 disabled\fR" 4
.IX Item "force=1 enabled, 0 disabled"
For configuring the command line \fI\-\-force\fR flag from a configuration file.
.IP "\fBverbose\fR=\fI1 enabled, 0 disabled\fR" 4
.IX Item "verbose=1 enabled, 0 disabled"
Enables verbose mode. Same as command line \fI\-\-verbose\fR flag.
.IP "\fBdebug\fR=\fI1 enabled, 0 disabled\fR" 4
.IX Item "debug=1 enabled, 0 disabled"
Enables debug mode. Same as command line \fI\-\-debug\fR flag.
.RE
.RS 4
.RE
.SS "\s-1EST CONFIGURATION SECTION\s0"
.IX Subsection "EST CONFIGURATION SECTION"
This section is opened using the following directive:
.PP
.Vb 1
\&  [est]
.Ve
.PP
Options and parameters related to \s-1EST\s0 server configuration.
.RS 4
.IP "\fBca\fR=\fIpath\fR" 4
.IX Item "ca=path"
Path to the \s-1CA\s0 Chain \s-1PEM\s0 file used by the \s-1EST\s0 server for authenticating itself
(over \s-1HTTPS\s0 communications) and issuing certificates.
.IP "\fBurl\fR=\fIurl\fR" 4
.IX Item "url=url"
Base \s-1EST HTTPS URL\s0 service (e.g. <https://rfctest7030.com/.well\-known/est>).
.IP "\fBplain_base64\fR=\fI1 plain base64, 0 send \s-1PEM\s0 file\fR" 4
.IX Item "plain_base64=1 plain base64, 0 send PEM file"
If this flag is enabled, it instructs the \fBpest\fR tool to be more \s-1RFC\s0
respectful during enrollment, and do not send the \s-1CSR\s0 in \s-1PEM\s0 format (i.e.
exclude \f(CW\*(C`\-\-\-BEGIN CERTIFICATE REQUEST\-\-\-\-\-\*(C'\fR headers and such). It only sends
the \s-1CSR\s0 encoded in \s-1DER\s0 format, transferring it with base64 encoding.
.IP "\fBstrict\fR=\fI1 enabled, 0 disabled\fR" 4
.IX Item "strict=1 enabled, 0 disabled"
This flag enables the \s-1EST\-RFC7030\s0 strict interpretation. This means that during
enrollments, if certificate based authentication is used, Subject Name changes
will be requested using the Change Subject Name attributes described in the
\&\s-1RFC730.\s0
.Sp
This flag can be set also from command line using the \fI\-\-est\-strict\fR flag.
.IP "\fBcreds\fR=\fIcredentials\fR" 4
.IX Item "creds=credentials"
Default \s-1HTTP BASIC\s0 credentials used by \s-1TEST\s0 when accessing the \s-1EST\s0 server. This
credentials may be overrided by test during enrollments. See
"\*(L"\s-1TESTS DEFINITION SECTIONS\*(R"\s0 description below.
.IP "\fBissuer_subject_name\fR=\fIsubject\fR" 4
.IX Item "issuer_subject_name=subject"
Issuer subject name (e.g. \f(CW\*(C`/CN=TestCA/O=MyEnrollmentCA/C=ES\*(C'\fR) of the
certificates delivered by the \s-1EST\s0 server during enrollments.
.RE
.RS 4
.RE
.SS "\s-1TEST CERTIFICATES CONFIGURATION SECTION\s0"
.IX Subsection "TEST CERTIFICATES CONFIGURATION SECTION"
This section is opened using the following directive:
.PP
.Vb 1
\&  [certificates]
.Ve
.PP
Each non-void line of this section is interpreted as a certificate/CA/Sub\-CA
declaration.
.PP
Each line is a sequence of columns, each column separated by one or more blank
space characters, and values may be enclosed by double quote characters.
Here follows an example of a simple \fIcertificates\fR section:
.PP
.Vb 5
\&  [certificates]
\&  # Id      CA   Subject                                                   Issuer
\&  # \-\-\-\-\-\-  \-\-\-  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-  \-\-\-\-\-\-
\&    FakeCA  yes  "/CN=estExampleCA"                                        \-
\&    BadCert no   "/CN=test1"                                               FakeCA
.Ve
.PP
In this example a fake (self-signed root) certification authority, identified
by the \s-1ID\s0 \f(CW\*(C`FakeCA\*(C'\fR with subject name \f(CW\*(C`/CN=estExampleCA\*(C'\fR is created. This fake
\&\s-1CA\s0 is used for issuing the certificate \f(CW\*(C`BadCert\*(C'\fR with subject \f(CW\*(C`/CN=test1\*(C'\fR.
.Sp
.RS 4
\&\- The \fIId\fR field is used for referring to these certifciates from tests.
.Sp
\&\- The \fI\s-1CA\s0\fR flag tells if this certificate is for a CA/SubCA (yes) or a end
certificate (no).
.Sp
\&\- The \fISubject\fR field is used for configuring the \fISubject Name\fR X.509
certificate attribute.
.Sp
\&\- The \fIIssuer\fR field is used for deciding who must sign this certificate. Use
dash character (\-) for issuing a self-signed certificate.
.RE
.SS "\s-1TEST HOOKS SECTION\s0"
.IX Subsection "TEST HOOKS SECTION"
This section is opened using the following directive:
.PP
.Vb 1
\&  [hooks]
.Ve
.PP
This section is for installing hook programs that will be invoked during tests.
.PP
Hooks can be useful for configuring the \s-1EST CA\s0 or \s-1EST\s0 service automatically
during runtime. For instance, adding automatically authorizations in the
validation authority used by the \s-1EST\s0 server.
.PP
The following hooks are supported at this moment:
.RS 4
.IP "\fBtest_start\fR=\fIpath\fR" 4
.IX Item "test_start=path"
Path to the program that will be run each time a test is started.
.IP "\fBtest_end\fR=\fIpath\fR" 4
.IX Item "test_end=path"
Path to the program that will be run each time a test is finished.
.IP "\fBtest_whitelist_add\fR=\fIpath\fR" 4
.IX Item "test_whitelist_add=path"
Path to a program that will be run for each element declared in a test
whitelist.
.RE
.RS 4
.RE
.PP
Go to section \*(L"\s-1HOOKS\*(R"\s0 if you are looking for examples and details about
hooks.
.SS "\s-1TESTS DEFINITION SECTION\s0"
.IX Subsection "TESTS DEFINITION SECTION"
A new test can be created opening a new section for it. Test section have the
following format:
.PP
.Vb 1
\&  [test <test_id>]
.Ve
.PP
The \fItest_id\fR string is the test identifier.
.PP
Tests are composed by steps and enrollment actions. Steps and enrollment
actions can be observed easily in the following code excerpt:
.PP
.Vb 10
\&   1. [test 3.1]
\&   2. title     = Reenrolling a device
\&   3. est       = https://another.est.server.com:444/.well\-known/est
\&   4. whitelist = \e
\&   5.         (cred=estuser:estpwd, /CN=test_3.1) \e
\&   6.         (cert=test_3.1\-1\-1,   /CN=test_3.1) \e
\&   7.         (cert=test_3.1\-2\-1,   /CN=test_3.1)
\&   8.
\&   9.         # enroll first \-\- leave enroll in \*(Aqtest_3.1\-1\-1\*(Aq
\&  10.         1/action  = simpleenroll
\&  11.         1/est     = https://another.est.server.com:442/.well\-known/est
\&  12.         1/in      = \e
\&  13.                 (cred=estuser:estpwd,/CN=test_3.1) > test_3.1\-1\-1
\&  14.
\&  15.         # try to reenroll two times, chaining correct certs
\&  16.         #        both tries should work
\&  17.         2/action  = simplereenroll
\&  18.         2/in      = \e
\&  19.                 (cert=test_3.1\-1\-1, /CN=test_3.1) > test_3.1\-2\-1 \e
\&  20.                 (cert=test_3.1\-2\-1, /CN=test_3.1) ++ \e
\&  21.                 (cert=test_3.1\-2\-1, \e
\&  22.                  est=https://broken.est.server.com/,
\&  23.                  /CN=test_3.1) !!
.Ve
.PP
Line by line:
.Sp
.Vb 2
\&   1. [test 3.1]
\&   2. title     = Reenrolling a device
.Ve
.Sp
.RS 4
These two lines starts the test definition of test \fIReenrolling a device\fR,
with id \f(CW3.1\fR.
.Sp
.Vb 1
\&   3. est       = http://another.est.server.com:444/.well\-known/est
.Ve
.Sp
This line overrides the global \s-1EST\s0 server configured in the \f(CW\*(C`[est]\*(C'\fR section
with a new default \s-1EST\s0 server for this test.
.Sp
.Vb 4
\&   4. whitelist = \e
\&   5.         (cred=estuser:estpwd, /CN=test_3.1) \e
\&   6.         (cert=test_3.1\-1\-1,   /CN=test_3.1) \e
\&   7.         (cert=test_3.1\-2\-1,   /CN=test_3.1)
.Ve
.Sp
The \fIwhitelist\fR parameters declares the upcoming authorized enrollments. In
this example we are declaring that the following enrollments will be accepted:
.Sp
.RS 4
1. A password-based enrollment of a certificate with credentials
\&\f(CW\*(C`estuser:estpwd\*(C'\fR and requesting the subject name \f(CW\*(C`/CN=test_3.1\*(C'\fR.
.Sp
2. A certificate-based reenrollment of a certificate using the
certificate referenced by the \s-1ID\s0 \f(CW\*(C`test_3.1\-1\-1\*(C'\fR. This reenrollment will
request the previous \s-1CN\s0 requested during enrollment.
.Sp
3. Another certificate-based reenrollment but using this time the
\&\f(CW\*(C`test_3.1\-2\-1\*(C'\fR certificate, and the same \s-1CN\s0 used before.
.RE
.RE
.RS 4
.Sp
.Vb 4
\&  10.         1/action  = simpleenroll
\&  11.         1/est     = https://another.est.server.com:442/.well\-known/est
\&  12.         1/in      = \e
\&  13.                 (cred=estuser:estpwd,/CN=test_3.1) > test_3.1\-1\-1
.Ve
.Sp
These two parameters describe the step 1. In this first step a client will
request a X.509 certificate with the subject name \f(CW\*(C`/CN=test_3.1\*(C'\fR, and
authenticating itself using credentials \f(CW\*(C`estuser:estpwd\*(C'\fR. Also, for this
enrollment, the default \s-1EST\s0 server previously set in the global \f(CW\*(C`[est]\*(C'\fR
section and in line 2, is overrided again.
.Sp
The returned certificate will be stored and referenced in next steps by the
certificate id \f(CW\*(C`test_3.1\-1\-1\*(C'\fR.
.Sp
.Vb 7
\&  17.         2/action  = simplereenroll
\&  18.         2/in      = \e
\&  19.                 (cert=test_3.1\-1\-1, /CN=test_3.1) > test_3.1\-2\-1 \e
\&  20.                 (cert=test_3.1\-2\-1, /CN=test_3.1) ++ \e
\&  21.                 (cert=test_3.1\-2\-1, \e
\&  22.                  est=https://broken.est.server.com/,
\&  23.                  /CN=test_3.1) !!
.Ve
.Sp
In this step, three reenrollments are performed sequentially:
.Sp
.RS 4
1. The first reenrollment uses the previous certificate \f(CW\*(C`test_3.1\-1\-1\*(C'\fR and
stores the new certificate in \f(CW\*(C`test_3.1\-2\-1\*(C'\fR.
.Sp
2. The second reenrollment uses the certificate obtained in the previous
reenrollment (\f(CW\*(C`test_3.1\-2\-1\*(C'\fR). The \f(CW\*(C`++\*(C'\fR particle makes explicit that this
step must be succesful.
.Sp
3. The third reenrollment is expectd to fail because it tries to enroll using
the non-working \f(CW\*(C`broken.est.server.com\*(C'\fR. This enrollment uses the parameter
\&\f(CW\*(C`est\*(C'\fR for overriding (again) any other \s-1EST\s0 server configured before for only
this enrollment.
.RE
.RE
.RS 4
.RE
.PP
In the described example above, \fBall\fR steps and enrollments must be succesful
to consider this test \s-1PASSED.\s0 Nevertheless, sometimes failing may be the
correct option. Take a look into the following example:
.PP
.Vb 12
\&   1. [test 2.2]
\&   2. title     = Enroll 1 ok, 4 bad
\&   3. whitelist = (cred=estuser:estpwd,/CN=test_2.2)
\&   4.
\&   5.         1/action  = simpleenroll
\&   6.         1/in      = \e
\&   7.                 (cred=estuser:estpwd, /CN=test_2.2) ++ \e
\&   8.                 (cred=_\|_\|_user:estpwd, /CN=test_2.2) !! \e
\&   9.                 (cred=estuser:_\|_\|_pwd, /CN=test_2.2) !! \e
\&  10.                 (cred=_\|_\|_user:_\|_\|_pwd, /CN=test_2.2) !! \e
\&  11.                 (cred=estuser:estpwd, /CN=test_2.2) !! \e
\&  12.                 (                     /CN=test_2.2) !!
.Ve
.PP
Note than whitelist only declares one succeful enrollment. Once a
whitelist-enrollment has been used, it cannot be used again. That it is the
reason that only test in line 7 is marked as succesful with the particle \f(CW\*(C`++\*(C'\fR,
and the rest of enrollments are marked as failures \f(CW\*(C`!!\*(C'\fR, including the
enrollment in line 11 (exactly equal to enrollment set in line 7).
.PP
If we would like to fix \fItest 2.2\fR for accepting both enrollments in lines 7
and 11, the following whitelist should be used:
.PP
.Vb 3
\&      whitelist = \e
\&              (cred=estuser:estpwd,/CN=test_2.2) \e
\&              (cred=estuser:estpwd,/CN=test_2.2)
.Ve
.PP
The test definitions section accept the following parameters:
.RS 4
.IP "\fBtitle\fR=\fItitle\fR" 4
.IX Item "title=title"
Test title.
.IP "\fBwhitelist\fR=\fIauthorized enrollments list\fR" 4
.IX Item "whitelist=authorized enrollments list"
Authorized enrollments and reenrollments. Syntax for each authorization:
.RS 4
.Sp
.RS 4
(\f(CW\*(C`cred\*(C'\fR=\fIcredentials\fR, \f(CW\*(C`cert\*(C'\fR=\fIcertificate_id\fR, \fISubject_Name\fR)
.RE
.RE
.RS 4
.Sp
The \fIcred\fR and \fIcert\fR fields are optional. \fISubject_Name\fR is mandatory.
.RE
.IP "\fIstep_id\fR/\fBaction\fR=\fI\s-1EST\s0 action\fR" 4
.IX Item "step_id/action=EST action"
\&\s-1EST\s0 action used by this step (e.g. \f(CW\*(C`simpleenroll\*(C'\fR or \f(CW\*(C`cacerts\*(C'\fR).
.IP "\fIstep_id\fR/\fBin\fR=\fI\s-1EST\s0 action\fR" 4
.IX Item "step_id/in=EST action"
Enrollments and reenrollments. Syntax for each enrollment:
.RS 4
.Sp
.RS 4
(\f(CW\*(C`cred\*(C'\fR=\fIcredentials\fR, \f(CW\*(C`cert\*(C'\fR=\fIcertificate_id\fR, \fIRequested_Subject_Name\fR) [\f(CW\*(C`!!\*(C'\fR|\f(CW\*(C`++\*(C'\fR|> \fIcert_id\fR]
.RE
.RE
.RS 4
.Sp
The \fIcred\fR and \fIcert\fR fields are optional. \fIRequested_Subject_Name\fR field is
mandatory.
.Sp
Test may declare explicitly if they will be sucessful (using particle \f(CW\*(C`++\*(C'\fR) or
if they will fail (using the particle \f(CW\*(C`!!\*(C'\fR).
.Sp
Finally, one enrollment may save the returned certificate using the > operator.
This operator requires enrollment to be succesful, and the returned certificate
will be identified by the \fIcert_id\fR identifier.
.RE
.RE
.RS 4
.RE
.SH "HOOKS"
.IX Header "HOOKS"
.SS "Test start"
.IX Subsection "Test start"
A custom program can be triggered each time a new test is started. Example of
\&\fItest start\fR hook:
.PP
.Vb 1
\&  #!/bin/bash
\&
\&  TEST_ID="$1"
\&
\&  msg()
\&  {
\&    echo "HOOK(test_start): $@"
\&  }
\&
\&  msg "New test started"
\&  msg "  Test ID [$TEST_ID]"
\&
\&  exit 0
.Ve
.SS "Test finished"
.IX Subsection "Test finished"
A custom program can be triggered each time a test is finished. Example of
\&\fItest finished\fR hook:
.PP
.Vb 1
\&  #!/bin/bash
\&
\&  TEST_ID="$1"
\&  ERROR="$2"
\&
\&  msg()
\&  {
\&    echo "HOOK(test_end): $@"
\&  }
\&
\&  STATUS="finished succesfully"
\&  if [ "$ERROR" ]; then
\&          STATUS="failed with error [$ERROR]"
\&  fi
\&  msg "Test [$TEST_ID] $STATUS"
\&
\&  exit 0
.Ve
.SS "Whitelist population"
.IX Subsection "Whitelist population"
A custom program can be triggered for each authorization declared in a test
whitelist. Example:
.PP
.Vb 1
\&  #!/bin/bash
\&
\&  TEST_ID="$1"               ; shift
\&  CERTIFICATE_ID="$1"        ; shift
\&  CERTIFICATE_SN="$1"        ; shift
\&  CERTIFICATE_ISSUER_ID="$1" ; shift
\&  CERTIFICATE_ISSUER_SN="$1" ; shift
\&  CREDS="$1"                 ; shift
\&  REQUESTED_SN="$1"          ; shift
\&
\&  msg()
\&  {
\&    echo "HOOK(whitelist_add): $@"
\&  }
\&
\&  msg "Adding whitelist entry to test [$TEST_ID]"
\&  msg "  \- Requested subject [$REQUESTED_SN]"
\&
\&  if [ "$CERTIFICATE_ID" ]; then
\&    msg "  \- Certificate based authentication"
\&    msg "    \- Certificate Issuer ID  [$CERTIFICATE_ISSUER_ID] ($CERTIFICATE_ISSUER_SN)"
\&    msg "    \- Certificate ID [$CERTIFICATE_ID] ($CERTIFICATE_SN)"
\&  else
\&    if [ "$CREDS" ]; then
\&      msg "  \- Password based authentication"
\&    else
\&      msg "  \- Authentication mechanism not set \- ERROR"
\&      exit 1
\&    fi
\&  fi
\&
\&  if [ "$CREDS" ]; then
\&    msg "  \- EST credentials: $CREDS"
\&  fi
\&
\&  exit 0
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "pest" 8
.IX Item "pest"
\&\s-1PEST\s0 manual page.
.IP "test.conf" 8
.IX Item "test.conf"
A complete test suite for testing an \s-1EST\s0 server supporting enrollments based on
third-party \s-1CA\s0 issued certificates. This means that clients authenticate
themselves using a certificate belonging to an external \s-1CA\s0 during enrollment.
Once they are enrolled, re-enrollments are conducted using the \s-1EST CA.\s0
.ie n .IP """demo.conf"" in demo" 8
.el .IP "``demo.conf'' in demo" 8
.IX Item "demo.conf in demo"
A complete (and simpler) test suite for testing the public \s-1EST\s0 service found in
<http://testrfc7030.com/>.
.IP "<http://www.testrfc7030.com/>" 8
.IX Item "<http://www.testrfc7030.com/>"
This server can be used to test the \s-1EST\s0 protocol as defined in \s-1RFC 7030.\s0
