NAME
    test - Test EST

SYNOPSIS
  Examples:
          ./test [options] [actions ...]
          ./pest -c test-suite.conf -t local-config.conf run 1.3
          ./pest -c all_in_one.conf gendata
          ./pest -c all_in_one.conf run all
          ./pest -c all_in_one.conf run [test_id1, test_id2, ...]
          ./pest -c all_in_one.conf -s -b run all
          ./pest -c all_in_one.conf -vD run 2.1
          ./pest -c all_in_one.conf list
          ./pest -c all_in_one.conf reset
          ./pest -c all_in_one.conf clean -f

  Options:
          -b, --est-base64    Do not send full PEM, only Base64 encoded DER.
          -c, --config=s      Load configuration file. This option can be used multiple
                              times. Order will be respected.
          -D, --debug         Print debug information.
          -f, --force         Overwrite existing files. Force actions.
          -h, --help          Brief help message.
          -m, --man           Full documentation.
          -s, --est-strict    Make use of the RFC7030 Change Subject Name attribute.
          -v, --verbose       Verbose messages.
          -V, --version       Print version information.

  Actions:
          clean               Delete all data (Requires -f flag)
          config              Dump parsed configuration (for debugging purposes)
          gendata             Generate CA and certificates used by tests.
          list                List tests and their current status (passed/failed)
          nop                 NOP
          reset               Delete all test ouput data (but keep generated certs)
          run                 Run a list of test (or all test if 'all' is passed)

DESCRIPTION
    TEST is a Perl Test EST program designed for running a EST test suite
    against EST implementations. Test suites are created using own TEST test
    definition language.

    Test suites are defined in one or more configuration files. See
    "CONFIGURATION FILE FORMAT" for more details.

ACTIONS
    Each invocation to TEST must be accompanied by an action:

        clean
            This action will delete all data generated by a test suite,
            including certificates and CA/SubCA generated by action
            *gendata*.

            This action will refuse working if flag *--force* is not set.

        config
            Dump consolidaed and parsed configuration from configuration
            files. Output is in Data::Dumper format.

            This action is designed for desesperated debugging purposes.

        gendata
            Build all certificates and CA/SubCA structure defined in section
            "TEST CERTIFICATES CONFIGURATION" by the configuration files.

            This data will be written in path set by the global parameter
            *certdir*.

        list
            This command will list all tests defined by the configuration
            files, and their current status (passed/failed/pending/error).

        nop Nothing to see here. Move along.

        reset
            This action will delete all output generated by tests. Note that
            certificates and CA/SubCA generated by the action *gendata* will
            remain untouched.

        run This action run the list of tests (by id) passed as arguments.

OPTIONS
    TEST supports the following options:

        -b, --est-base64
            It instructs pest to be more RFC respectful during enrollment,
            and do not send the CSR in PEM format (i.e. exclude "---BEGIN
            CERTIFICATE REQUEST-----" headers and such). It only sends the
            CSR encoded in DER format, transferring it with base64 encoding.

        -c, --config=*s*
            This option can be defined multiple times, and it is processed
            in the same order than it is set in the command line.

            It loads configuration files, one after another. Configuration
            files may overwrite or add new information to each section.

        -D, --debug
            Dump HTTP communications and other useful debug information.
            This flag also enables verbosity (see *-v*).

        -f, --force
            Overwrite existing files. Force actions.

        -h, --help
            Print a brief help message and exits.

        -m, --man
            Prints the manual page and exits.

        -s, --est-strict
            This flag enables the EST-RFC7030 strict interpretation. This
            means that during enrollments, if certificate based
            authentication is used, Subject Name changes will be requested
            using the Change Subject Name attributes described in the
            RFC730.

            This flag can be also configured from a configuration file using
            the *strict* parameter in the "EST CONFIGURATION SECTION"
            section.

        -v, --verbose
            Verbose messages.

        -V, --version
            Print version information.

CONFIGURATION FILE FORMAT
    Configuration files contain:

        - Configuration parameters.

        - The certificates, test CA and test Sub-CA schema for building the
        test certificates.

        - Hooks for executing external programs during tests.

        - Tests.

    Configuration files may contain comments. Comments are always ignored,
    and they must start with the hash character "#" and they finish at the
    end of the line.

    Examples:

      parameter = value  # this is a comment about this parameter
      my_param =  # this seems assigning a comment to a parameter, but it
                  # is not true: my param will not have any value assigned

    A configuration file is divided into several sections. There are
    standard fixed sections and test sections, each one distinguished by its
    own *id*. Examples of directives opening different sections:

      [est]
        ... here goes 'est' configuration parameters ...

      [test my_test]
        ... here goes my test definition ...

      [hooks]
        ... here is where hooks are installed ...

    Each configuration is described in detail in the following sections.

  IMPLICIT GLOBAL SECTION
    Any parameter set before any section is opened is set in the implicit
    global section.

    Global parameters are global configuration parameters for configuring
    the most basic parameters of the TEST and PEST applications.

        ca_bits=*number*
            This parameter is used for configuring the CA/SubCA private key
            key sizes.

        cert_bits=*number*
            This parameter is used for configuring certificates private key
            key sizes.

        certdir=*path to test certificates*
            Sets the target directory where test certificates will be
            written and kept.

        outdir=*path to test output*
            Path where test output will be written to.

        pest=*path to pest program*
            Path where pest can be found (usually *../pest*).

        force=*1 enabled, 0 disabled*
            For configuring the command line *--force* flag from a
            configuration file.

        verbose=*1 enabled, 0 disabled*
            Enables verbose mode. Same as command line *--verbose* flag.

        debug=*1 enabled, 0 disabled*
            Enables debug mode. Same as command line *--debug* flag.

  EST CONFIGURATION SECTION
    This section is opened using the following directive:

      [est]

    Options and parameters related to EST server configuration.

        ca=*path*
            Path to the CA Chain PEM file used by the EST server for
            authenticating itself (over HTTPS communications) and issuing
            certificates.

        url=*url*
            Base EST HTTPS URL service (e.g.
            <https://rfctest7030.com/.well-known/est>).

        strict=*1 enabled, 0 disabled*
            This flag enables the EST-RFC7030 strict interpretation. This
            means that during enrollments, if certificate based
            authentication is used, Subject Name changes will be requested
            using the Change Subject Name attributes described in the
            RFC730.

            This flag can be set also from command line using the
            *--est-strict* flag.

        creds=*url*
            Default HTTP BASIC credentials used by TEST when accessing the
            EST server. This credentials may be overrided by test during
            enrollments. See ""TESTS DEFINITION SECTIONS" description below.

        issuer_subject_name=*subject*
            Issuer subject name (e.g. "/CN=TestCA/O=MyEnrollmentCA/C=ES") of
            the certificates delivered by the EST server during enrollments.

  TEST CERTIFICATES CONFIGURATION SECTION
    This section is opened using the following directive:

      [est]

    Each non-void line of this section is interpreted as a
    certificate/CA/Sub-CA declaration.

    Each line is a sequence of columns, each column separated by one or more
    blank space characters, and values may be enclosed by double quote
    characters. Here follows an example of a simple *certificates* section:

      [certificates]
      # Id      CA   Subject                                                   Issuer
      # ------  ---  --------------------------------------------------------  ------
        FakeCA  yes  "/CN=estExampleCA"                                        -
        BadCert no   "/CN=test1"                                               FakeCA

    In this example a fake (self-signed root) certification authority,
    identified by the ID "FakeCA" with subject name "/CN=estExampleCA" is
    created. This fake CA is used for issuing the certificate "BadCert" with
    subject "/CN=test1".

        - The *Id* field is used for referring to these certifciates from
        tests.

        - The *CA* flag tells if this certificate is for a CA/SubCA (yes) or
        a end certificate (no).

        - The *Subject* field is used for configuring the *Subject Name*
        X.509 certificate attribute.

        - The *Issuer* field is used for deciding who must sign this
        certificate. Use dash character (-) for issuing a self-signed
        certificate.

  Hooks section ("[hooks]")
    This section is opened using the following directive:

      [hooks]

    This section is for installing hook programs that will be invoked during
    tests.

    Hooks can be useful for configuring the EST CA or EST service
    automatically during runtime. For instance, adding automatically
    authorizations in the validation authority used by the EST server.

    The following hooks are supported at this moment:

        test_start=*path*
            Path to the program that will be run each time a test is
            started.

        test_whitelist_add=*path*
            Path to a program that will be run for each element declared in
            a test whitelist.

    Go to section "HOOKS" if you are looking for examples and details about
    hooks.

  TESTS DEFINITION SECTION
    A new test can be created opening a new section for it. Test section
    have the following format:

      [test <test_id>]

    The *test_id* string is the test identifier.

    Tests are composed by steps and enrollment actions. Steps and enrollment
    actions can be observed easily in the following code excerpt:

       1. [test 3.1]
       2. title     = Reenrolling a device
       3. whitelist = \
       4.         (cred=estuser:estpwd, /CN=test_3.1) \
       5.         (cert=test_3.1-1-1,   /CN=test_3.1) \
       6.         (cert=test_3.1-2-1,   /CN=test_3.1)
       7.         
       8.         # enroll first -- leave enroll in 'test_3.1-1-1'
       9.         1/action  = simpleenroll
      10.         1/in      = \
      11.                 (cred=estuser:estpwd,/CN=test_3.1) > test_3.1-1-1
      12.         
      13.         # try to reenroll two times, chaining correct certs
      14.         #        both tries should work
      15.         2/action  = simplereenroll
      16.         2/in      = \
      17.                 (cert=test_3.1-1-1, /CN=test_3.1) > test_3.1-2-1 \
      18.                 (cert=test_3.1-2-1, /CN=test_3.1) ++

    Line by line:

           1. [test 3.1]
           2. title     = Reenrolling a device

        These two lines starts the test definition of test *Reenrolling a
        device*, with id 3.1.

           3. whitelist = \
           4.         (cred=estuser:estpwd, /CN=test_3.1) \
           5.         (cert=test_3.1-1-1,   /CN=test_3.1) \
           6.         (cert=test_3.1-2-1,   /CN=test_3.1)

        The *whitelist* parameters declares the upcoming authorized
        enrollments. In this example we are declaring that the following
        enrollments will be accepted:

            1. A password-based enrollment of a certificate with credentials
            "estuser:estpwd" and requesting the subject name "/CN=test_3.1".

            2. A certificate-based reenrollment of a certificate using the
            certificate referenced by the ID "test_3.1-1-1". This
            reenrollment will request the previous CN requested during
            enrollment.

            3. Another certificate-based reenrollment but using this time
            the "test_3.1-2-1" certificate, and the same CN used before.

           9.         1/action  = simpleenroll
          10.         1/in      = \
          11.                 (cred=estuser:estpwd,/CN=test_3.1) > test_3.1-1-1

        These two parameters describe the step 1. In this first step a
        client will request a X.509 certificate with the subject name
        "/CN=test_3.1", and authenticating itself using secret credentials.

        The returned certificate will be stored and referenced in next steps
        by the certificate id "test_3.1-1-1".

          15.         2/action  = simplereenroll
          16.         2/in      = \
          17.                 (cert=test_3.1-1-1, /CN=test_3.1) > test_3.1-2-1 \
          18.                 (cert=test_3.1-2-1, /CN=test_3.1) ++

        In this step, two reenrollments are performed sequentially. The
        first reenrollment uses the previous certificate "test_3.1-1-1" and
        stores the new certificate in "test_3.1-2-1". The second
        reenrollment uses the certificate obtained in the previous
        reenrollment ("test_3.1-2-1"). The "++" particle makes explicit that
        this step must be succesful.

    In the described example above, all steps and enrollments must be
    succesful to consider this test PASSED. Nevertheless, sometimes failing
    may be the correct option. Take a look into the following example:

       1. [test 2.2]
       2. title     = Enroll 1 ok, 4 bad
       3. whitelist = (cred=estuser:estpwd,/CN=test_2.2)
       4. 
       5.         1/action  = simpleenroll
       6.         1/in      = \
       7.                 (cred=estuser:estpwd, /CN=test_2.2) ++ \
       8.                 (cred=___user:estpwd, /CN=test_2.2) !! \
       9.                 (cred=estuser:___pwd, /CN=test_2.2) !! \
      10.                 (cred=___user:___pwd, /CN=test_2.2) !! \
      11.                 (cred=estuser:estpwd, /CN=test_2.2) !! \
      12.                 (                     /CN=test_2.2) !!

    Note than whitelist only declares one succeful enrollment. Once a
    whitelist-enrollment has been used, it cannot be used again. That it is
    the reason that only test in line 7 is marked as succesful with the
    particle "++", and the rest of enrollments are marked as failures "!!",
    including the enrollment in line 11 (exactly equal to enrollment set in
    line 7).

    If we would like to fix *test 2.2* for accepting both enrollments in
    lines 7 and 11, the following whitelist should be used:

          whitelist = \
                  (cred=estuser:estpwd,/CN=test_2.2) \
                  (cred=estuser:estpwd,/CN=test_2.2)

    The test definitions section accept the following parameters:

        title=*title*
            Test title.

        whitelist=*authorized enrollments list*
            Authorized enrollments and reenrollments. Syntax for each
            authorization:

                ("cred"=*credentials*, "cert"=*certificate_id*,
                *Subject_Name*)

            The *cred* and *cert* fields are optional. *Subject_Name* is
            mandatory.

        *step_id*/action=*EST action*
            EST action used by this step (e.g. "simpleenroll" or "cacerts").

        *step_id*/in=*EST action*
            Enrollments and reenrollments. Syntax for each enrollment:

                ("cred"=*credentials*, "cert"=*certificate_id*,
                *Requested_Subject_Name*) ["!!"|"++"|> *cert_id*]

            The *cred* and *cert* fields are optional.
            *Requested_Subject_Name* field is mandatory.

            Test may declare explicitly if they will be sucessful (using
            particle "++") or if they will fail (using the particle "!!").

            Finally, one enrollment may save the returned certificate using
            the > operator. This operator requires enrollment to be
            succesful, and the returned certificate will be identified by
            the *cert_id* identifier.

HOOKS
  Test start
    A custom program can be triggered each time a new test is started.
    Example of *test start* hook:

      #!/bin/bash
  
      TEST_ID="$1"
  
      msg()
      {
        echo "HOOK(test_start): $@"
      }
  
      msg "New test started"
      msg "  Test ID [$TEST_ID]"
  
      exit 0

  Whitelist population
    A custom program can be triggered for each authorization declared in a
    test whitelist. Example:

      #!/bin/bash
  
      TEST_ID="$1"               ; shift
      CERTIFICATE_ID="$1"        ; shift
      CERTIFICATE_SN="$1"        ; shift
      CERTIFICATE_ISSUER_ID="$1" ; shift
      CERTIFICATE_ISSUER_SN="$1" ; shift
      CREDS="$1"                 ; shift
      REQUESTED_SN="$1"          ; shift
  
      msg()
      {
        echo "HOOK(whitelist_add): $@"
      }
  
      msg "Adding whitelist entry to test [$TEST_ID]"
      msg "  - Requested subject [$REQUESTED_SN]"
  
      if [ "$CERTIFICATE_ID" ]; then
        msg "  - Certificate based authentication"
        msg "    - Certificate Issuer ID  [$CERTIFICATE_ISSUER_ID] ($CERTIFICATE_ISSUER_SN)"
        msg "    - Certificate ID [$CERTIFICATE_ID] ($CERTIFICATE_SN)"
      else
        if [ "$CREDS" ]; then
          msg "  - Password based authentication"
        else
          msg "  - Authentication mechanism not set - ERROR"
          exit 1
        fi
      fi
  
      if [ "$CREDS" ]; then
        msg "  - EST credentials: $CREDS"
      fi

      exit 0

SEE ALSO
    pest    PEST manual page.

    test.conf
            A complete test suite for testing an EST server supporting
            enrollments based on third-party CA issued certificates. This
            means that clients authenticate themselves using a certificate
            belonging to an external CA during enrollment. Once they are
            enrolled, re-enrollments are conducted using the EST CA.

    "demo.conf" in demo
            A complete (and simpler) test suite for testing the public EST
            service found in <http://testrfc7030.com/>.

    <http://www.testrfc7030.com/>
            This server can be used to test the EST protocol as defined in
            RFC 7030.

